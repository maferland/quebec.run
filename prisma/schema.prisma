// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts Account[]
  sessions Session[]
  clubs    Club[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Club {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  description  String?
  website      String?
  instagram    String?
  facebook     String?
  language     String?  // 'fr', 'en', or 'both'
  
  // Strava integration
  stravaClubId String?  @unique
  stravaSlug   String?
  isManual     Boolean  @default(true)
  lastSynced   DateTime?
  
  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ownerId      String
  
  // Relations
  owner           User             @relation(fields: [ownerId], references: [id])
  events          Event[]
  recurringEvents RecurringEvent[]
  
  @@map("clubs")
}

model RecurringEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  
  // Location
  address     String?
  latitude    Float?
  longitude   Float?
  
  // Event details
  distance    String?
  pace        String?
  
  // Schedule
  schedulePattern String
  timezone        String  @default("America/Toronto")
  
  // Generation control
  isActive        Boolean   @default(true)
  generateUntil   DateTime?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clubId      String
  
  // Relations
  club            Club    @relation(fields: [clubId], references: [id], onDelete: Cascade)
  generatedEvents Event[]
  
  @@map("recurring_events")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  
  // Location
  address     String?
  latitude    Float?
  longitude   Float?
  
  // Event timing
  date        DateTime
  time        String
  
  // Event details
  distance    String?
  pace        String?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clubId      String
  
  // Recurring event link
  recurringEventId String?
  
  // Relations
  club           Club            @relation(fields: [clubId], references: [id], onDelete: Cascade)
  recurringEvent RecurringEvent? @relation(fields: [recurringEventId], references: [id], onDelete: SetNull)
  
  @@map("events")
}
